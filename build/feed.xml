<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dan Harper</title>
    <description>Technology and Leadership.
</description>
    <link>http://dmuso.com/</link>
    <atom:link href="http://dmuso.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Jan 2016 05:40:02 +0000</pubDate>
    <lastBuildDate>Fri, 15 Jan 2016 05:40:02 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Use Storytelling to make your Boring Project an Awesome Project</title>
        <description>&lt;p&gt;Let’s face it, some of our projects are just plain boring:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“We created a new TPS report for Mandy so that she doesn’t need to manually combine 10 spreadsheets every week.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Communicating the true value of your project to stakeholders, team members and the wider organisation can be challenging. Using the age old skill of storytelling however, we can better engage our stakeholders, celebrate our wins, and put a smile on the most hardened faces. Your own style and creativity can be combined with existing storytelling masterpieces to bring your projects to life.&lt;/p&gt;

&lt;h2 id=&quot;the-age-old-skill-of-storytelling&quot;&gt;The age old skill of storytelling&lt;/h2&gt;

&lt;p&gt;In the old days, before these snazzy computers and printing presses. Wisdom was passed down from generation to generation using storytelling as the medium. Why storytelling?&lt;/p&gt;

&lt;p&gt;Well, back in those days, it must have been worked out pretty quickly that people remember stories. When you wanted to ensure the future of your people and to pass on everything you had learned, storytelling was the medium of choice. People remembered the stories, they remembered the details, they were entertained by the struggles between good and evil. They also remembered the characters, and what could be learned by their examples.&lt;/p&gt;

&lt;h2 id=&quot;storytelling-today&quot;&gt;Storytelling today&lt;/h2&gt;

&lt;p&gt;Of course, we still use storytelling today. We can see some of the most obvious examples when we sit to watch a movie or a television show. The stories still engage audiences, and keep them watching. Season cliffhangers keep the audience waiting, they talk about the characters, what happened, and speculate on what’s to come.&lt;/p&gt;

&lt;h2 id=&quot;storytelling-where-you-wouldnt-expect-it&quot;&gt;Storytelling where you wouldn’t expect it&lt;/h2&gt;

&lt;p&gt;As I spent some time pondering on the use of storytelling in our world, I realised that storytelling is used commonly in places where we don’t expect it to be, and we see it every day. Sales and particularly marketing, use storytelling when selling products. Take for example this image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dmuso.com/assets/beer-boring.jpg&quot; alt=&quot;Boring Beer&quot; /&gt;
&lt;em&gt;Image from: &lt;a href=&quot;http://homebrewbungler.com/the-sound-of-beer/&quot;&gt;Homebrew Bungler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What story does this image convey? Some dude just grabbed a beer out of the fridge, poured it out into a glass, placed them on the kitchen bench and decided to take a picture with his phone. It’s not very enticing. The person taking this photo and sharing it with you is telling you they cared just enough to take out their phone and take a photo. Maybe he doesn’t mind this brand of beer over some others. Does the photo tempt you to go and buy this beer to try it for yourself? Probably not. You may not even remember the brand name next time you’re in the shop.&lt;/p&gt;

&lt;p&gt;Now, compare it to this photo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dmuso.com/assets/beer-exciting.jpg&quot; alt=&quot;Exciting Beer&quot; /&gt;
&lt;em&gt;Image from: &lt;a href=&quot;http://petapixel.com/2014/10/22/tutorial-capture-gorgeous-5-light-beer-bottle-product-shot-start-finish/&quot;&gt;PetaPixel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The story here is much more compelling. Here we can assume the beer is cold, and it’s presentation is promising to quench our thirst. Not only that, but it promises adventure. The beer is about to be consumed on the balcony of a trendy penthouse apartment, most likely with someone else joining you. Why would you be enjoying this tasty beverage on your own with this kind of view? Considerable effort went into making this photo look attractive, compelling, and to tell a story.&lt;/p&gt;

&lt;p&gt;Now we come to the ultimate in beer storytelling:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/57zo8O5pDXc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Wow, just wow. Through these three examples, we can follow a transformation from boring to awesome. If you’re the cynical type, you may be asking the question, “Yeah, nice and all, but does it work?”. Well, it would seem the answer is &lt;a href=&quot;http://www.adweek.com/news/advertising-branding/how-heineken-s-special-blend-storytelling-and-science-won-day-165323&quot;&gt;yes, it does work&lt;/a&gt;. Here we have statistical measurement of the positive impact of storytelling.&lt;/p&gt;

&lt;p&gt;Now, how can we apply this to the projects we are delivering? How do we best engage our stakeholders, our team and our organisation? How do we inspire them? Highlight the challenges? Celebrate the wins?&lt;/p&gt;

&lt;p&gt;Next up, I’ll be showing you two examples of who to turn boring projects into awesome projects.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jan 2016 14:12:00 +0000</pubDate>
        <link>http://dmuso.com/2016/01/11/using-storytelling-to-sell-your-project.html</link>
        <guid isPermaLink="true">http://dmuso.com/2016/01/11/using-storytelling-to-sell-your-project.html</guid>
        
        
        <category>project-management</category>
        
      </item>
    
      <item>
        <title>First Steps with Ruby on Rails</title>
        <description>&lt;p&gt;You may be an absolute beginner in regards to Ruby on Rails, however, you’ve heard enough good things about it that you’ve decided to jump in. The question is, where do you start?&lt;/p&gt;

&lt;p&gt;Some options would be &lt;a href=&quot;https://www.bloc.io/ruby-warrior#/&quot;&gt;Ruby Warrior&lt;/a&gt;, &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Code Academy&lt;/a&gt;, possibly hunt around for some tutorials, or decide on a web app to build and have a go. There is also another question that you’re probably wanting to know that answer to, should I learn Rails or Ruby first?&lt;/p&gt;

&lt;h2 id=&quot;rails-or-ruby-first&quot;&gt;Rails or Ruby First?&lt;/h2&gt;

&lt;p&gt;The Ruby/Rails community is generally split at around 50/50 when it comes to the answer to this question. There is value in both options. If you start with Ruby first, you will understand many of the core language concepts. A Ruby first approach should also help you write cleaner code, which will help with long term maintenance of the first applications you write.&lt;/p&gt;

&lt;p&gt;Now, Rails does have a lot of “magic” that you’ll need to wrap your head around. There are many Rails concepts that are not a part of the core Ruby language. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UTC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Attempting to use this outside of Rails will give you an error:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`days&amp;#39; for 3:Fixnum&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is because Rails monkey-patches core Ruby libraries to make life easier for the Rails developer. This type of example is only scratching the surface of the magic that Rails gives to developers. Learning Rails first will give you access to this magic that will make your code simpler and more readable.&lt;/p&gt;

&lt;p&gt;My recommendation is to use the book &lt;a href=&quot;https://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Web Development with Rails&lt;/a&gt;. It teaches you how to build an ecommerce website, and takes you through it step by step. I learnt Rails first via this book, and I’ve seen two non-programmers use the book to learn Rails successfully.&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Nov 2015 21:03:00 +0000</pubDate>
        <link>http://dmuso.com/2015/11/08/first-steps-with-ruby-on-rails.html</link>
        <guid isPermaLink="true">http://dmuso.com/2015/11/08/first-steps-with-ruby-on-rails.html</guid>
        
        
        <category>ruby</category>
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Docker on Mac OS X: &#39;No space left on device&#39; error</title>
        <description>&lt;p&gt;After using Docker with boot2docker or Docker Machine for some time, you may find yourself facing an error “No space left on device” appearing in your output from commands like &lt;code&gt;docker-compose build&lt;/code&gt;. When you check how much space you have currently available on your Mac, you may notice that you’ve got plenty of disk capacity. So where is this error coming from?&lt;/p&gt;

&lt;p&gt;boot2docker and Docker Machine both utilise a Linux VM image that runs on your Mac operating system. Because Docker only runs on Linux, this enables you to use Docker commands in a terminal as if you were running on a Linux machine. The Docker commands you type are sent to a Docker process running inside the Linux VM.&lt;/p&gt;

&lt;p&gt;When you receive error messages in your output from your Docker commands, they are usually errors related to the local Linux VM environment that your Docker commands have been sent to. The ‘no space left on device’ error is one such example. It means that the VM image used by Docker has run out of disk space.&lt;/p&gt;

&lt;p&gt;Everytime you perform a change to your application that uses Docker, you will collect old Docker images. Docker creates a new image that contains your changes, and then untags the existing image. These untagged images hang around on the Linux VM image and over time, the images consume all of the disk space on the VM image.&lt;/p&gt;

&lt;p&gt;Docker usage that can increase the speed at which your disk capacity gets eaten up include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running &lt;code&gt;docker-compose build&lt;/code&gt; several times per day as a part of your regular development workflow.&lt;/li&gt;
  &lt;li&gt;Developing on multiple projects simultaneously, or switching between projects regularly within a week of development.&lt;/li&gt;
  &lt;li&gt;Having multiple software projects that use many different variations of “FROM” images. Examples may include many Ruby projects with “FROM” images that include “FROM ruby”, “FROM ruby:2.1”, “FROM ruby:2.2”, etc.&lt;/li&gt;
  &lt;li&gt;When you’re working on a platform that utilises microservices, you will likely be seeing or doing every one of the above points. This makes the disk space problem more prevalent than usual.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;

&lt;p&gt;An easy fix to get you back up and running again is to run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rmi -f $( docker images | grep &#39;&amp;lt;none&amp;gt;&#39; | tr -s &#39; &#39; | cut -d &#39; &#39; -f 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will obtain a list of images that are currently tagged as “&lt;none&gt;&quot; (effectively untagged) and pass them to `docker rmi -f` which will delete the image. One of the advantages of using Docker is that images can generally be deleted with minimal risk. If you accidently delete something you needed, just run a `docker-compose build` again from your project directory and you&#39;ll be up and running again.&lt;/none&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 21:03:00 +0000</pubDate>
        <link>http://dmuso.com/2015/11/08/docker-on-mac-no-space-left-on-device.html</link>
        <guid isPermaLink="true">http://dmuso.com/2015/11/08/docker-on-mac-no-space-left-on-device.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Double or Single Quoted Strings in Ruby</title>
        <description>&lt;p&gt;Once you’ve been coding in Ruby for a while, you start to notice a trend. No one can decide whether to use double or single quoted strings in Ruby! You’ll see code written in examples, tutorials, gems, and the code from your teammates that will have a mixture of single or double quotes for strings. Sometimes there will seem to be little rhyme nor reason as to why someone has used single or double quotes.&lt;/p&gt;

&lt;h2 id=&quot;string-interpolation&quot;&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;There is one reason that you’ve probably already noticed: you need to use double quotes when your string requires interpolation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;green&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;The colour of the light is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The colour of the light is green&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, that’s the first rule of Ruby strings: Use double quotes when you need string interpolation.&lt;/p&gt;

&lt;h2 id=&quot;escaping-special-characters&quot;&gt;Escaping Special Characters&lt;/h2&gt;

&lt;p&gt;If you need to print special characters out to a console or file, you’ll need to use a double quoted string.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;green&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The colour of the light is:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using single quoted strings in this example will literally print &lt;code&gt;\n&lt;/code&gt; to your console:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The colour of the light is:\ngreen&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngreen&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;You may hear someone say that single quoted strings are faster than double quoted strings. Technically, this is true, however, the performance gains vary and have been recorded to be between 0.4% and 3% faster using single quotes. If every single microsecond is important to you, then use single quoted strings.&lt;/p&gt;

&lt;h2 id=&quot;rubocop&quot;&gt;RuboCop&lt;/h2&gt;

&lt;p&gt;When working with a team of people with varying levels of experience in Ruby, it can be helpful to have coding style guides and have them enforced at build/test time with something like &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;RuboCop&lt;/a&gt;. If there is any slight chance that you want to add RuboCop at some point in the future. Save yourself the future headaches and conform to RuboCop’s default rules on strings, which is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use single quoted strings unless interpolation is required.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you have a large codebase, even if you’re the only developer, it can be a lot of work to replace quotes in nearly all of your source code files. The best option would probably be to add RuboCop early on in a project so that the styling is consistent. It’s not a fun job to go back and tweak all your source code to make them consistent.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Oct 2015 21:14:00 +0000</pubDate>
        <link>http://dmuso.com/2015/10/27/double-or-single-quoted-strings-in-ruby.html</link>
        <guid isPermaLink="true">http://dmuso.com/2015/10/27/double-or-single-quoted-strings-in-ruby.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Introduce a new language to your team - Part 1</title>
        <description>&lt;p&gt;As a professional developer, you probably have experience in a few different languages. You will know from your experience that programming languages have strengths and weaknesses. No single language is the ideal solution for all types of problems. A time will come in your career where you see an opportunity to introduce a new programming language that isn’t already in use within your team.&lt;/p&gt;

&lt;p&gt;Here are some of the issues you may come across:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The “trendiness” factor&lt;/li&gt;
  &lt;li&gt;Dealing with team leads and managers&lt;/li&gt;
  &lt;li&gt;Demonstrating business value and/or cost savings&lt;/li&gt;
  &lt;li&gt;Operations&lt;/li&gt;
  &lt;li&gt;Hiring new team members&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this series of articles, I will give you strategies and ideas to be able to overcome each one of these issues. This article is Part 1 of the series.&lt;/p&gt;

&lt;h2 id=&quot;the-trendiness-factor&quot;&gt;The “trendiness” factor&lt;/h2&gt;

&lt;p&gt;Things move fast in the technology sector, and new programming languages are continually being invented. An interesting dynamic seems to occur within the developer community when new technology surfaces. Some developers are excited because it nails something that is important to them. Some may not see an immediate benefit, and respond with caution. Then there are usually a percentage of the community that could be classed as “haters”, or are at least quite skeptical of the touted benefits.&lt;/p&gt;

&lt;p&gt;You are probably in the excited camp, or you have moved up from the cautious camp because you can see a use for this technology within your team. Your job is to get the developers on your team to move closer to the excited camp. Developers are usually logical beings with a dose of healthy scepticism. This means that a successful approach will be logical with a focus on proving out the technology with examples.&lt;/p&gt;

&lt;h3 id=&quot;how-to-solve-for-it&quot;&gt;How to solve for it&lt;/h3&gt;

&lt;p&gt;Probably the most effective way that I have seen is to code up a simple prototype that replicates one piece of functionality from your current codebase. You can then setup a meeting with your team where you give everyone a walkthrough of the code. Talk about the new language and its benefits in a real life situation. Encourage questions and discussion.&lt;/p&gt;

&lt;p&gt;If your project involves microservices, then you may be able to code up a replacement to one of the services. If you’re team is working on an MVC web application, I would suggest coding up a full stack prototype with the new language, but only reproducing one simple feature from the existing codebase. When picking a feature from a large application, don’t replicate things like user authentication. Pick something that is core to the value that your application delivers to users.&lt;/p&gt;

&lt;p&gt;Take note of each team member’s objections and questions. Book in a follow up meeting to address any queries you can’t answer on the spot. Ask other people in the team to answer some of the questions. If a developer asks “Does it scale?” and you have another team member who is strong on scalability, ask that team member what they think. This promotes discussion and helps all the team members feel a part of the process.&lt;/p&gt;

&lt;p&gt;Think about how you can introduce the new programming language in a small way to start with. This lowers the risk of something going wrong and helps team members learn the technology in an environment that is less stressful. When developers are stressed, they don’t think clearly, and could resent new technology. In a low stress environment, their response would usually come with a problem solving approach, which is ideal in most situations.&lt;/p&gt;

&lt;p&gt;Finally, come up with a plan. If everything goes well with the team, it doesn’t stop there. Involve your team in the planning process and outline the next steps. Ask your team the question: “what would &lt;em&gt;we&lt;/em&gt; need to do to get this to production?”. Recruit your team to help tackle the next set of issues to overcome.&lt;/p&gt;

&lt;p&gt;Part 2 of this series coming soon!&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Oct 2015 18:26:34 +0000</pubDate>
        <link>http://dmuso.com/2015/10/21/introduce-a-new-language-to-your-team-part-1.html</link>
        <guid isPermaLink="true">http://dmuso.com/2015/10/21/introduce-a-new-language-to-your-team-part-1.html</guid>
        
        
        <category>teams</category>
        
      </item>
    
  </channel>
</rss>
